{"remainingRequest":"/media/hsy/128/hsy-IdeaProject/mall-app-web/node_modules/babel-loader/lib/index.js!/media/hsy/128/hsy-IdeaProject/mall-app-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/hsy/128/hsy-IdeaProject/mall-app-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/hsy/128/hsy-IdeaProject/mall-app-web/src/views/pms/product.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/hsy/128/hsy-IdeaProject/mall-app-web/src/views/pms/product.vue","mtime":1623209612865},{"path":"/media/hsy/128/hsy-IdeaProject/mall-app-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/hsy/128/hsy-IdeaProject/mall-app-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/media/hsy/128/hsy-IdeaProject/mall-app-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/hsy/128/hsy-IdeaProject/mall-app-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.search\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport memberApi from '@/api/member'; // 支付类型\n\nvar payTypeOptions = [{\n  type: '1',\n  name: '现金'\n}, {\n  type: '2',\n  name: '微信'\n}, {\n  type: '3',\n  name: '支付宝'\n}, {\n  type: '4',\n  name: '银行卡'\n}];\nexport default {\n  data: function data() {\n    return {\n      list: [],\n      total: 0,\n      // 总记录数\n      currentPage: 1,\n      // 当前页码 \n      pageSize: 20,\n      // 每页显示10条数据,\n      searchMap: {\n        // 条件查询绑定的条件值\n        cardNum: '',\n        name: '',\n        payType: '',\n        birthday: ''\n      },\n      payTypeOptions: payTypeOptions,\n      // payTypeOptions: payTypeOptions\n      dialogFormVisible: false,\n      //控制对话框\n      pojo: {\n        id: null,\n        cardNum: '',\n        name: '',\n        birthday: '',\n        phone: '',\n        money: 0,\n        integral: 0,\n        payType: '',\n        address: ''\n      },\n      // 提交的数据\n      rules: {\n        // 校验规则\n        cardNum: [{\n          required: true,\n          message: '卡号不能为空',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '姓名不能为空',\n          trigger: 'blur'\n        }],\n        payType: [{\n          required: true,\n          message: '支付类型不能为空',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    // 初始化获取列表数据\n    this.fetchData();\n  },\n  methods: {\n    // 当每页显示条数改变后,被触发 , val是最新的每页显示条数\n    handleSizeChange: function handleSizeChange(val) {\n      // console.log(val)\n      this.pageSize = val;\n      this.fetchData();\n    },\n    // 当页码改变后,被触发 , val 是最新的页面\n    handleCurrentChange: function handleCurrentChange(val) {\n      // console.log(val)\n      this.currentPage = val;\n      this.fetchData();\n    },\n    fetchData: function fetchData() {\n      var _this = this;\n\n      // memberApi.getList().then(response => {\n      // 调用分页查询数据\n      memberApi.search(this.currentPage, this.pageSize, this.searchMap).then(function (response) {\n        var resp = response.data; // console.log(resp.data.rows)\n\n        _this.list = resp.data.rows;\n        _this.total = resp.data.total;\n      });\n    },\n    //重置\n    resetForm: function resetForm(formName) {\n      console.log('重置', formName); // 重置会看 el-form-item 组件元素的 prop 上是否指定了字段名，指定了才会重置生效\n\n      this.$refs[formName].resetFields();\n    },\n    // 提交新增数据\n    addData: function addData(formName) {\n      var _this2 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          //提交表单\n          console.log('addData');\n          memberApi.add(_this2.pojo).then(function (response) {\n            var resp = response.data;\n\n            if (resp.flag) {\n              //新增成功，刷新列表数据\n              _this2.fetchData();\n\n              _this2.dialogFormVisible = false; // 关闭窗口\n            } else {\n              // 失败，来点提示信息\n              _this2.$message({\n                message: resp.message,\n                type: 'warning'\n              });\n            }\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    // 弹出新增窗口\n    handleAdd: function handleAdd() {\n      var _this3 = this;\n\n      console.log(this.pojo); // this.pojo = {}\n\n      this.dialogFormVisible = true;\n      this.$nextTick(function () {\n        // this.$nextTick()它是一个异步事件，当渲染结束 之后 ，它的回调函数才会被执行\n        // 弹出窗口打开之后 ，需要加载Dom, 就需要花费一点时间，我们就应该等待它加载完dom之后，再进行调用resetFields方法，重置表单和清除样式\n        _this3.$refs['pojoForm'].resetFields();\n      });\n    },\n    // 打开编辑窗口\n    handleEdit: function handleEdit(id) {\n      var _this4 = this;\n\n      console.log('编辑', id);\n      this.handleAdd();\n      memberApi.getById(id).then(function (response) {\n        var resp = response.data;\n\n        if (resp.flag) {\n          _this4.pojo = resp.data;\n          console.log(_this4.pojo);\n        }\n      });\n    },\n    updateData: function updateData(formName) {\n      var _this5 = this;\n\n      console.log('updateData');\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          // 提交更新\n          memberApi.update(_this5.pojo).then(function (response) {\n            var resp = response.data;\n\n            if (resp.flag) {\n              // 刷新列表\n              _this5.fetchData();\n\n              _this5.dialogFormVisible = false;\n            } else {\n              _this5.$message({\n                message: resp.message,\n                type: 'warning'\n              });\n            }\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    // 删除会员\n    handleDelete: function handleDelete(id) {\n      var _this6 = this;\n\n      console.log('删除', id);\n      this.$confirm('确认删除这条记录吗？', '提示', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消'\n      }).then(function () {\n        // 确认\n        console.log('确认');\n        memberApi.deleteById(id).then(function (response) {\n          // console.log(response)\n          var resp = response.data;\n\n          _this6.$message({\n            message: resp.message,\n            type: resp.flag ? 'success' : 'error'\n          });\n\n          if (resp.flag) {\n            // 删除成功，刷新列表数据\n            _this6.fetchData();\n          }\n        });\n      }).catch(function () {\n        // 取消，不用理会\n        console.log('取消');\n      });\n    }\n  },\n  filters: {\n    payTypeFilter: function payTypeFilter(type) {\n      /* payTypeOptions.find(obj => {\n          return obj.type === type\n      }) */\n      // 在过滤 器当中不能引用当前实例 this   this.payTypeOptions 错误的\n      var payObj = payTypeOptions.find(function (obj) {\n        return obj.type === type;\n      });\n      return payObj ? payObj.name : null;\n    }\n  }\n};",{"version":3,"sources":["product.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <!-- :inline=\"true\" 表单一行显示 -->\n        <el-form ref=\"searchForm\" :inline=\"true\" :model=\"searchMap\" style=\"margin-top: 20px\">\n            <!-- 重置会看 el-form-item 组件元素的 prop 上是否指定了字段名，指定了才会重置生效 -->\n            <el-form-item prop=\"cardNum\">\n                <el-input v-model=\"searchMap.cardNum\" placeholder=\"会员卡号\" style=\"width: 200px\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"name\">\n                <el-input v-model=\"searchMap.name\" placeholder=\"会员名字\" style=\"width: 200px\"></el-input>\n            </el-form-item>\n            <el-form-item prop=\"payType\">\n                <el-select v-model=\"searchMap.payType\" placeholder=\"支付类型\" style=\"width: 110px\">\n                    <!-- 不要忘记 payTypeOptions 绑定到data中 -->\n                    <el-option v-for=\"option in payTypeOptions\" \n                    :key=\"option.type\"\n                    :label=\"option.name\"\n                    :value=\"option.type\"\n                    ></el-option>\n                </el-select>\n            </el-form-item>\n            <el-form-item prop=\"birthday\">\n                <!-- value-format 是指定绑定值的格式 -->\n                <el-date-picker style=\"width: 200px\" value-format=\"yyyy-MM-dd\" v-model=\"searchMap.birthday\"  type=\"date\" placeholder=\"出生日期\"> </el-date-picker>\n            </el-form-item>\n\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"fetchData\" >查询</el-button>\n                 <el-button type=\"primary\" @click=\"handleAdd\" >新增</el-button>\n                <el-button  @click=\"resetForm('searchForm')\" >重置</el-button>\n            </el-form-item>\n        </el-form>\n        <!-- 数据列表\n        :data 绑定渲染的数据\n        border 表格边框\n         -->\n         <el-table\n            :data=\"list\"\n            height=\"380\"\n            border\n            style=\"width: 100%\">\n            <!-- type=\"index\"获取索引值，从1开始 ，label显示标题，prop 数据字段名，width列宽 -->\n            <el-table-column type=\"index\" label=\"序号\" width=\"60\"></el-table-column>\n            <el-table-column prop=\"cardNum\" label=\"会员卡号\" ></el-table-column>\n            <el-table-column prop=\"name\" label=\"会员姓名\" width=\"90\"></el-table-column>\n            <el-table-column prop=\"birthday\" label=\"会员生日\" ></el-table-column>\n            <el-table-column prop=\"phone\" label=\"手机号码\" ></el-table-column>\n            <el-table-column prop=\"integral\" label=\"可用积分\" ></el-table-column>\n            <el-table-column prop=\"money\" label=\"开卡金额\" ></el-table-column>\n            <el-table-column prop=\"payType\" label=\"支付类型\" >\n                <template slot-scope=\"scope\">\n                    <span>{{scope.row.payType | payTypeFilter}}</span>\n                </template>\n\n            </el-table-column>\n            <el-table-column prop=\"address\" label=\"会员地址\" ></el-table-column>\n             <el-table-column label=\"操作\" width=\"150\">\n                <template slot-scope=\"scope\">\n                    <el-button\n                    size=\"mini\"\n                    @click=\"handleEdit(scope.row.id)\">编辑</el-button>\n                    <el-button\n                    size=\"mini\"\n                    type=\"danger\"\n                    @click=\"handleDelete(scope.row.id)\">删除</el-button>\n                </template>\n             </el-table-column>\n        </el-table>\n        <!-- 分页组件 -->\n        <el-pagination\n            @size-change=\"handleSizeChange\"\n            @current-change=\"handleCurrentChange\"\n            :current-page=\"currentPage\"\n            :page-sizes=\"[10, 20, 50]\"\n            :page-size=\"pageSize\"\n            layout=\"total, sizes, prev, pager, next, jumper\"\n            :total=\"total\">\n        </el-pagination>\n\n        <!-- 弹出新增窗口 \n        title 窗口的标题\n        :visible.sync 当它true的时候，窗口会被弹出\n        -->\n        <el-dialog title=\"会员编辑\" :visible.sync=\"dialogFormVisible\" width=\"500px\">\n            <el-form \n            :rules=\"rules\"\n            ref=\"pojoForm\"\n            label-width=\"100px\"\n            label-position=\"right\"\n            style=\"width: 400px;\"\n            :model=\"pojo\">\n                <el-form-item label=\"会员卡号\" prop=\"cardNum\" >\n                <el-input v-model=\"pojo.cardNum\" ></el-input>\n                </el-form-item>\n                <el-form-item label=\"会员姓名\" prop=\"name\" >\n                <el-input v-model=\"pojo.name\" ></el-input>\n                </el-form-item>\n                <el-form-item label=\"会员生日\" prop=\"birthday\" >\n                    <!-- value-format 是指定绑定值的格式 -->\n                    <el-date-picker style=\"width: 200px\" value-format=\"yyyy-MM-dd\" v-model=\"pojo.birthday\"  type=\"date\" placeholder=\"会员生日\"> </el-date-picker>\n                </el-form-item>\n                <el-form-item label=\"手机号码\" prop=\"phone\" >\n                <el-input v-model=\"pojo.phone\" ></el-input>\n                </el-form-item>\n                <el-form-item label=\"开卡金额\" prop=\"money\">\n                <el-input v-model=\"pojo.money\" ></el-input>\n                </el-form-item>\n                <el-form-item label=\"可用积分\" prop=\"integral\">\n                <el-input v-model=\"pojo.integral\" ></el-input>\n                </el-form-item>\n                <el-form-item label=\"支付类型\" prop=\"payType\" >\n                    <el-select v-model=\"pojo.payType\" placeholder=\"支付类型\" style=\"width: 110px\">\n                        <!-- 不要忘记 payTypeOptions 绑定到data中 -->\n                        <el-option v-for=\"option in payTypeOptions\" \n                        :key=\"option.type\"\n                        :label=\"option.name\"\n                        :value=\"option.type\"\n                        ></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"会员地址\" prop=\"address\">\n                    <el-input type=\"textarea\" v-model=\"pojo.address\" ></el-input>\n                </el-form-item>\n                \n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n                <!-- <el-button type=\"primary\" @click=\"addData('pojoForm')\">确 定</el-button> -->\n                <el-button type=\"primary\" @click=\"pojo.id === null ? addData('pojoForm'): updateData('pojoForm')\">确 定</el-button>\n            </div>\n        </el-dialog>\n    </div>\n    \n</template>\n\n\n<script>\nimport memberApi from '@/api/member'\n\n// 支付类型\nconst payTypeOptions = [\n    {type: '1', name: '现金'},\n    {type: '2', name: '微信'},\n    {type: '3', name: '支付宝'},\n    {type: '4', name: '银行卡'},\n]\n\nexport default {\n    \n    data() {\n        return {\n            list: [],\n            total: 0, // 总记录数\n            currentPage: 1, // 当前页码 \n            pageSize: 20, // 每页显示10条数据,\n            searchMap: { // 条件查询绑定的条件值\n                cardNum: '',\n                name: '',\n                payType: '',\n                birthday: ''\n            }, \n            payTypeOptions, // payTypeOptions: payTypeOptions\n            dialogFormVisible: false, //控制对话框\n            pojo: {\n                id: null,\n                cardNum: '',\n                name: '',\n                birthday: '',\n                phone: '',\n                money: 0,\n                integral: 0,\n                payType: '',\n                address: ''\n            }, // 提交的数据\n            rules: { // 校验规则\n                cardNum: [\n                    {required: true, message: '卡号不能为空', trigger: 'blur'}\n                ],\n                name: [\n                    {required: true, message: '姓名不能为空', trigger: 'blur'}\n                ],\n                payType: [\n                    {required: true, message: '支付类型不能为空', trigger: 'change'}\n                ]\n            }\n        }\n    },\n\n    created() {\n        // 初始化获取列表数据\n        this.fetchData()\n    },\n\n    methods: {\n        // 当每页显示条数改变后,被触发 , val是最新的每页显示条数\n        handleSizeChange(val) {\n            // console.log(val)\n            this.pageSize = val\n            this.fetchData()\n        },\n        // 当页码改变后,被触发 , val 是最新的页面\n        handleCurrentChange(val) {\n            // console.log(val)\n            this.currentPage = val\n            this.fetchData()\n        },\n        fetchData() {\n            // memberApi.getList().then(response => {\n            // 调用分页查询数据\n            memberApi.search(this.currentPage, this.pageSize, this.searchMap).then(response =>{\n                const resp = response.data\n                // console.log(resp.data.rows)\n                this.list = resp.data.rows\n                this.total = resp.data.total\n            })\n        },\n        \n        //重置\n        resetForm(formName) {\n            console.log('重置', formName)\n            // 重置会看 el-form-item 组件元素的 prop 上是否指定了字段名，指定了才会重置生效\n            this.$refs[formName].resetFields()\n        },\n        // 提交新增数据\n        addData(formName) {\n            this.$refs[formName].validate(valid => {\n                if(valid){\n                    //提交表单\n                    console.log('addData')\n                    memberApi.add(this.pojo).then(response => {\n                        const resp = response.data\n                        if(resp.flag) {\n                            //新增成功，刷新列表数据\n                            this.fetchData()\n                            this.dialogFormVisible = false // 关闭窗口\n                        }else {\n                            // 失败，来点提示信息\n                            this.$message({\n                                message: resp.message,\n                                type: 'warning'\n                            })\n                        }\n                    })\n                }else {\n                    return false\n                }\n            })\n        },\n        // 弹出新增窗口\n        handleAdd() {\n            console.log(this.pojo)\n            // this.pojo = {}\n            this.dialogFormVisible = true\n            this.$nextTick(() => { \n                // this.$nextTick()它是一个异步事件，当渲染结束 之后 ，它的回调函数才会被执行\n                // 弹出窗口打开之后 ，需要加载Dom, 就需要花费一点时间，我们就应该等待它加载完dom之后，再进行调用resetFields方法，重置表单和清除样式\n                this.$refs['pojoForm'].resetFields()\n            })\n            \n        },\n        \n        // 打开编辑窗口\n        handleEdit(id) {\n            console.log('编辑', id)\n           this.handleAdd()\n            memberApi.getById(id).then(response => {\n                const resp = response.data\n                if(resp.flag) {\n                    this.pojo = resp.data\n                    console.log(this.pojo)\n                }\n            })\n        },\n\n        updateData(formName) {\n            console.log('updateData')\n            this.$refs[formName].validate(valid => {\n                if(valid){\n                    // 提交更新\n                    memberApi.update(this.pojo).then(response => {\n                        const resp = response.data\n                        if(resp.flag) {\n                            // 刷新列表\n                            this.fetchData()\n                            this.dialogFormVisible = false\n                        }else {\n                            this.$message({\n                                message: resp.message,\n                                type: 'warning'\n                            })\n                        }\n                    })\n\n                }else {\n                    return false\n                }\n            })\n        },\n        // 删除会员\n        handleDelete(id) {\n            console.log('删除', id)\n            this.$confirm('确认删除这条记录吗？', '提示', {\n                confirmButtonText: '确认',\n                cancelButtonText: '取消',\n            }).then(() => {\n                // 确认\n                console.log('确认')\n                memberApi.deleteById(id).then(response => {\n                    // console.log(response)\n                    const resp = response.data\n\n                    this.$message({\n                        message: resp.message,\n                        type: resp.flag ? 'success': 'error'\n                    })\n\n                    if(resp.flag) {\n                        // 删除成功，刷新列表数据\n                        this.fetchData()\n                    }\n                })\n            }).catch(() => {\n                // 取消，不用理会\n                console.log('取消')\n            })\n        },\n    },\n\n    filters: {\n        payTypeFilter (type) {\n            /* payTypeOptions.find(obj => {\n                return obj.type === type\n            }) */\n            // 在过滤 器当中不能引用当前实例 this   this.payTypeOptions 错误的\n            const payObj = payTypeOptions.find(obj => obj.type === type)\n            return payObj ? payObj.name : null\n        }\n    }\n}\n</script>"],"sourceRoot":"src/views/pms"}]}